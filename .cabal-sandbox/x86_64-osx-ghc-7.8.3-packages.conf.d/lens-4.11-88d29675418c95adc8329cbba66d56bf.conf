name: lens
version: 4.11
id: lens-4.11-88d29675418c95adc8329cbba66d56bf
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
                 Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
                 Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.3/lens-4.11
library-dirs: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.3/lens-4.11
hs-libraries: HSlens-4.11
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-98aa445e59f3eb0c886795ff07406d84
         base-4.7.0.1-df210ede1eb79477fef5662549c32927
         bifunctors-5-e133d682d43a4b7e682c032bde7a3564
         bytestring-0.10.4.0-4aa78c8ca7b6b65993eefc131f7d94fa
         comonad-4.2.6-6dfc7072c8ce1b9d8775b378fa827607
         containers-0.5.5.1-0d8db9193d3e3371e0142bcc8a4a0721
         contravariant-1.3.1.1-2eceecee808d5f202bf68e5b35bf0eeb
         distributive-0.4.4-aced6fc23d7a8814539baead93d50f01
         exceptions-0.8.0.2-e0e555af9fb934fc4a42edec61eda3b2
         filepath-1.3.0.2-1580a61d3226e4be45fe2130dc2881e3
         free-4.12.1-3eb7ca8906122c10fbd884860630b962
         ghc-prim-0.3.1.0-954cb57749cf319beafdc89b3415422c
         hashable-1.2.2.0-45bd22df8c4ead6b3a7fb1d08bb07f7d
         kan-extensions-4.2.2-9ddee936058e89869314aadf66852e8d
         mtl-2.2.1-05c98059bc3926647251ab9e6cb3164e
         parallel-3.2.0.4-c330f8c64fe6816637464ee78fcb9a93
         profunctors-5.1.1-b49e3e00218a8a3e25b4bb4e945cc46c
         reflection-1.5.2.1-244923224f8eff432ec8dc4586e2059d
         semigroupoids-5.0.0.1-b50f1888da356ffdefd04b0c7d046704
         semigroups-0.16.2.2-4f23a640bb0615626c3d50fbe0823ec5
         tagged-0.8.0.1-f24d0df5a9671b6d66f814f6cf0cd6e6
         template-haskell-2.9.0.0-1b116efce4b8d0d027f75248473a95bb
         text-1.1.0.0-9bd69e9ace700e05fb08e463086bc383
         transformers-0.4.3.0-4bf279c7bbcd18fdf67f75df501d1fdf
         transformers-compat-0.4.0.4-016d59eabfa256fa5877df8a03d16908
         unordered-containers-0.2.4.0-69836b34d13649bcfacc8fb0c9f53e64
         vector-0.10.9.1-c550551354bc7c2b5a1d261f39b2f3f4
         void-0.7-cdf74409a8974604854adae1a1516d24
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.3/lens-4.11/html/lens.haddock
haddock-html: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.3/lens-4.11/html
