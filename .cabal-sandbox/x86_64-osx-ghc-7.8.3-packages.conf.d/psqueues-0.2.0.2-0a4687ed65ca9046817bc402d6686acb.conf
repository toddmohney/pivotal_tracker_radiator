name: psqueues
version: 0.2.0.2
id: psqueues-0.2.0.2-0a4687ed65ca9046817bc402d6686acb
license: BSD3
copyright:
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
stability:
homepage:
package-url:
synopsis: Pure priority search queues
description: The psqueues package provides
             <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
             three different flavors.
             .
             * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
             deletion and lookup. This implementation is based on Ralf Hinze's
             <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
             Hence, it is similar to the
             <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
             considerably faster and provides a slightly different API.
             .
             * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
             to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
             (like @IntMap@) with an additional min-heap property.
             .
             * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
             simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
             hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
             this implementation is comparable to that of @IntPSQ@, but it is more widely
             applicable since the keys are not restricted to @Int@, but rather to any
             @Hashable@ datatype.
             .
             Each of the three implementations provides the same API, so they can be used
             interchangeably. The benchmarks show how they perform relative to one
             another, and also compared to the other Priority Search Queue
             implementations on Hackage:
             <http://hackage.haskell.org/package/PSQueue PSQueue>
             and
             <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
             .
             <<http://i.imgur.com/KmbDKR6.png>>
             .
             <<http://i.imgur.com/ClT181D.png>>
             .
             Typical applications of Priority Search Queues include:
             .
             * Caches, and more specifically LRU Caches;
             .
             * Schedulers;
             .
             * Pathfinding algorithms, such as Dijkstra's and A*.
category: Data Structures
author:
exposed: True
exposed-modules: Data.HashPSQ Data.IntPSQ Data.OrdPSQ
hidden-modules: Data.BitUtil Data.HashPSQ.Internal
                Data.IntPSQ.Internal Data.OrdPSQ.Internal
trusted: False
import-dirs: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.3/psqueues-0.2.0.2
library-dirs: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/lib/x86_64-osx-ghc-7.8.3/psqueues-0.2.0.2
hs-libraries: HSpsqueues-0.2.0.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.1-df210ede1eb79477fef5662549c32927
         deepseq-1.3.0.2-8f63133c1b77f3b3190f04893cf340e4
         ghc-prim-0.3.1.0-954cb57749cf319beafdc89b3415422c
         hashable-1.2.2.0-45bd22df8c4ead6b3a7fb1d08bb07f7d
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.3/psqueues-0.2.0.2/html/psqueues.haddock
haddock-html: /Users/toddmohney/workspace/pivotal_tracker_radiator/.cabal-sandbox/share/doc/x86_64-osx-ghc-7.8.3/psqueues-0.2.0.2/html
